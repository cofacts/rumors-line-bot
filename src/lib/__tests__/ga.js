import ua from 'universal-analytics';
import { BigQuery } from '@google-cloud/bigquery';
import MockDate from 'mockdate';

import ga from '../ga';

jest.mock('universal-analytics', () => {
  const mockVisitor = {
    screenview: jest.fn(),
    set: jest.fn(),
    send: jest.fn(),
    event: jest.fn(),
  };

  return jest.fn().mockReturnValue(mockVisitor);
});

jest.mock('@google-cloud/bigquery', () => {
  const insertMock = jest.fn(() => Promise.resolve());

  return {
    BigQuery: class {
      dataset = () => ({ table: () => ({ insert: insertMock }) });
    },
  };
});

beforeEach(() => {
  ua.mockClear();
  ua().screenview.mockClear();
  ua().set.mockClear();
  ua().send.mockClear();
  ua().event.mockClear();
  new BigQuery().dataset().table().insert.mockClear();
  MockDate.set(612921600000);
});

afterEach(() => {
  MockDate.reset();
});

it('returns visitor', () => {
  const visitor = ga('userId');
  expect(visitor).toHaveProperty('send');
  expect(ua().screenview.mock.calls[0]).toMatchInlineSnapshot(`
    Array [
      "N/A",
      "rumors-line-bot",
    ]
  `);
  expect(ua().set.mock.calls).toMatchInlineSnapshot(`
    Array [
      Array [
        "cd1",
        "user",
      ],
    ]
  `);

  visitor.send();
  expect(ua().send).toHaveBeenCalledTimes(1);

  // Expect called with an Event batch that has no events
  expect(new BigQuery().dataset().table().insert.mock.calls)
    .toMatchInlineSnapshot(`
    Array [
      Array [
        Object {
          "createdAt": 1989-06-04T00:00:00.000Z,
          "events": Array [],
          "messageSource": "user",
          "text": "",
        },
      ],
    ]
  `);
});

it('sets title when title is given', () => {
  // 3000 emoji title. When slicing, it should not break emoji.
  const longTitle = Array.from(Array(1000))
    .map(() => '👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦')
    .join('');

  const visitor = ga('userId', '__INIT__', longTitle, 'room');
  expect(ua().screenview.mock.calls[0]).toMatchInlineSnapshot(`
    Array [
      "__INIT__",
      "rumors-line-bot",
    ]
  `);
  expect(ua().set.mock.calls[0]).toMatchInlineSnapshot(`
    Array [
      "dt",
      "👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧👩‍👩‍👧‍👦👨‍👩‍👧‍👦👨‍👨‍👧‍👧",
    ]
  `);

  visitor.send();

  const { text, ...otherArgs } = new BigQuery().dataset().table().insert.mock
    .calls[0][0];

  // Expect user id and messages source is included in insert() args
  expect(otherArgs).toMatchInlineSnapshot(`
    Object {
      "createdAt": 1989-06-04T00:00:00.000Z,
      "events": Array [],
      "messageSource": "room",
    }
  `);
  // Expect title is sent to BigQuery
  expect(text).toHaveLength(longTitle.length);
});

it('sets events', () => {
  const visitor = ga('userId');

  visitor.event({
    ec: 'event_category1',
    ea: 'event_action1',
    el: 'event_label1',
    ev: 'event_value1',
  });

  visitor.event({
    ec: 'event_category2',
    ea: 'event_action2',
    el: 'event_label2',
    // Missing value, fill with null
  });

  visitor.send();

  // Expect all events are included in BigQuery
  expect(new BigQuery().dataset().table().insert.mock.calls)
    .toMatchInlineSnapshot(`
    Array [
      Array [
        Object {
          "createdAt": 1989-06-04T00:00:00.000Z,
          "events": Array [
            Object {
              "action": "event_action1",
              "category": "event_category1",
              "label": "event_label1",
              "time": 1989-06-04T00:00:00.000Z,
              "value": "event_value1",
            },
            Object {
              "action": "event_action2",
              "category": "event_category2",
              "label": "event_label2",
              "time": 1989-06-04T00:00:00.000Z,
              "value": null,
            },
          ],
          "messageSource": "user",
          "text": "",
        },
      ],
    ]
  `);
});
