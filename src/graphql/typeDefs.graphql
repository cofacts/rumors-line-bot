directive @auth(check: [String]) on FIELD_DEFINITION

type Query {
  insights: MessagingAPIInsight!

  # Open monitor metrics of the job queue
  queue: [QueueInfo!]!

  # Returns articleReplyLinks of the current user
  userArticleLinks(
    before: Cursor
    after: Cursor
    first: Int
    orderBy: UserArticleLinksOrderBy
  ): UserArticleLinkConnection @auth(check: ["userId"])

  # Get user's notification setting
  setting: UserSetting @auth(check: ["userId"])

  isMgpAwardee: Boolean @auth(check: ["userId"])
}

type Mutation {
  """
  Establish article-user link between the current user and the specified article.
  """
  setViewed(articleId: String!): UserArticleLink @auth(check: ["userId"])

  """
  Add feedback to article-reply in context.
  Returns UserSetting when done.
  """
  allowNotification(allow: Boolean!): UserSetting @auth(check: ["userId"])
}

type MessagingAPIInsight {

  """
  Ref: https://developers.line.biz/en/reference/messaging-api/#get-number-of-delivery-messages
  """
  messageDelivery(date: MessagingAPIDate!): MessagingAPIMessageDeliveryInsight

  """
  Ref: https://developers.line.biz/en/reference/messaging-api/#get-number-of-followers
  """
  followers(date: MessagingAPIDate!): MessagingAPIFollowersInsight

  """
  Ref: https://developers.line.biz/en/reference/messaging-api/#get-demographic
  """
  demographic(date: MessagingAPIDate!): MessaginAPIDemographicInsight
}

type UserSetting {
  userId: String
  allowNewReplyUpdate: Boolean
  newReplyNotifyToken: String
}

type MessagingAPIMessageDeliveryInsight {
  status: MessagingAPIInsightStatus
  broadcast: Int
  targeting: Int
  autoResponse: Int
  welcomeResponse: Int
  chat: Int
  apiPush: Int
  apiMulticast: Int
  apiNarrowcast: Int
  apiReply: Int
}


type MessagingAPIFollowersInsight {
  status: MessagingAPIInsightStatus
  followers: Int
  targetedReaches: Int
  blocks: Int
}

type MessaginAPIDemographicInsight {
  available: Boolean
  genders: [MessagingAPIInsightGenderStat]
  ages: [MessagingAPIInsightAgeStat]
  areas: [MessagingAPIInsightAreaStat]
  appTypes: [MessagingAPIInsightAppTypeStat]
  subscriptionPeriods: [MessagingAPIInsightSubscriptionStat]
}

type MessagingAPIInsightGenderStat {
  """
  Raw string from Messaging API
  Ref: https://developers.line.biz/en/reference/messaging-api/#response-28
  """
  gender: String
  percentage: Float
}

type MessagingAPIInsightAgeStat {
  """
  Raw string from Messaging API
  Ref: https://developers.line.biz/en/reference/messaging-api/#response-28
  """
  age: String

  # null when unknown
  from: Int

  # null for "from50" or unknown
  to: Int

  percentage: Float
}

type MessagingAPIInsightAreaStat {
  """
  Raw string from Messaging API
  Ref: https://developers.line.biz/en/reference/messaging-api/#response-28
  """
  area: String

  percentage: Float
}

type MessagingAPIInsightAppTypeStat {
  """
  Raw string from Messaging API
  Ref: https://developers.line.biz/en/reference/messaging-api/#response-28
  """
  appType: String

  percentage: Float
}

type MessagingAPIInsightSubscriptionStat {
  """
  Raw string from Messaging API
  Ref: https://developers.line.biz/en/reference/messaging-api/#response-28
  """
  subscriptionPeriod: String

  # null when unknown; -1 for over365days
  withinDays: Int

  percentage: Float
}

"""
Date format accepted by messaging API, in form of "yyyyMMdd".
Ref: https://developers.line.biz/en/reference/messaging-api/#get-number-of-followers
"""
scalar MessagingAPIDate

"""
1-1 mapping of status returned by Messaging API.
Ref: https://developers.line.biz/en/reference/messaging-api/#get-number-of-followers
"""
enum MessagingAPIInsightStatus {
  READY
  UNREADY
  OUT_OF_SERVICE
}

type QueueInfo {
  queueName: String!

  # https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queuegetjobcounts
  jobCounts: QueueJobCountInfo!

  # https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#queueispaused
  isPaused: Boolean!

  # Timestamp of the last job in "completed" state. Null if no job in completed state yet.
  lastCompletedAt: Date

  # Timestamp of the last job in "waiting" state. Null if no job in waiting state yet.
  lastWaitingAt: Date
}

type QueueJobCountInfo {
  waiting: Int!
  active: Int!
  completed: Int!
  failed: Int!
  delayed: Int!
}

enum FeedbackVote {
  UPVOTE
  DOWNVOTE
}

# Date time object <> ISO timestamp
scalar Date

"""One document in userArticleLink collection"""
type UserArticleLink implements MongoDBDocument {
  id: ObjectId!
  articleId: String!
  createdAt: Date!
  lastViewedAt: Date
  lastRepliedAt: Date
  lastPositiveFeedbackRepliedAt: Date

  # Linked to Cofacts API
  article: CofactsAPIArticle
}

input UserArticleLinksOrderBy {
  createdAt: SortOrderEnum
}

#
# Pagination types interface implementation
#

scalar ObjectId

interface MongoDBDocument {
  id: ObjectId!
}

interface Connection {
  totalCount: Int!
  edges: [ConnectionEdge!]
  pageInfo: PageInfo!,
}

interface ConnectionEdge {
  node: MongoDBDocument!
  cursor: Cursor!
}

# A string that seralizes to Base64 string and parses to pagination data
scalar Cursor

type PageInfo {
  """Cursor of the first item. null when no item in list."""
  firstCursor: Cursor

  """Cursor of the last item. null when no item in list."""
  lastCursor: Cursor
}

enum SortOrderEnum {
  ASC
  DESC
}

#
# Pagination types of individual queries
#

type UserArticleLinkConnection implements Connection {
  totalCount: Int!
  edges: [UserArticleLinkConnectionEdge!],
  pageInfo: PageInfo!,
}

type UserArticleLinkConnectionEdge implements ConnectionEdge {
  node: UserArticleLink!
  cursor: Cursor!
}

# Cofacts API article stub, for unidirectional merge with Cofacts API
type CofactsAPIArticle {
  id: ID!
}
